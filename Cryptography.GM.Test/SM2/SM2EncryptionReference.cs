using System;
using System.Globalization;
using System.Numerics;
using System.Text;
using Cryptography.GM.ECMath;
using Xunit;

namespace Cryptography.GM.Test.SM2;

// ReSharper disable once InconsistentNaming
public class SM2EncryptionReference
{
    [Fact]
    public void EncVector()
    {
        var d = BigInteger.Parse("3945208F7B2144B13F36E38AC6D39F95889393692860B51A42FB81EF4DF7C5B8",
                                 NumberStyles.HexNumber);
        var k = (BigInteger.Parse("59276E27D506861A16680F3AD9C02DCCEF3CC1FA3CDBE4CE6D54B80DEAC1BC21",
                                  NumberStyles.HexNumber) - 1).ToByteArray();
        var m = Encoding.ASCII.GetBytes("encryption standard");
        var e = new byte[] {
            0x04, 0x04, 0xEB, 0xFC, 0x71, 0x8E, 0x8D, 0x17, 0x98, 0x62, 0x04, 0x32, 0x26, 0x8E, 0x77, 0xFE,
            0xB6, 0x41, 0x5E, 0x2E, 0xDE, 0x0E, 0x07, 0x3C, 0x0F, 0x4F, 0x64, 0x0E, 0xCD, 0x2E, 0x14, 0x9A,
            0x73, 0xE8, 0x58, 0xF9, 0xD8, 0x1E, 0x54, 0x30, 0xA5, 0x7B, 0x36, 0xDA, 0xAB, 0x8F, 0x95, 0x0A,
            0x3C, 0x64, 0xE6, 0xEE, 0x6A, 0x63, 0x09, 0x4D, 0x99, 0x28, 0x3A, 0xFF, 0x76, 0x7E, 0x12, 0x4D,
            0xF0, 0x59, 0x98, 0x3C, 0x18, 0xF8, 0x09, 0xE2, 0x62, 0x92, 0x3C, 0x53, 0xAE, 0xC2, 0x95, 0xD3,
            0x03, 0x83, 0xB5, 0x4E, 0x39, 0xD6, 0x09, 0xD1, 0x60, 0xAF, 0xCB, 0x19, 0x08, 0xD0, 0xBD, 0x87,
            0x66, 0x21, 0x88, 0x6C, 0xA9, 0x89, 0xCA, 0x9C, 0x7D, 0x58, 0x08, 0x73, 0x07, 0xCA, 0x93, 0x09,
            0x2D, 0x65, 0x1E, 0xFA
        };

        Array.Resize(ref k, k.Length + 13);
        var rng = new FixedBytesGenerator(k);
        var a = System.Security.Cryptography.SM2.Create(rng);
        var b = System.Security.Cryptography.SM2.Create();

        b.ImportPrivateKey(d);
        a.ImportPublicKey(b.ExportKey().Q);

        Assert.Equal(e, a.EncryptData(m, EcPointFormat.Uncompressed));
        Assert.Equal(m, b.DecryptData(e));

        Assert.Equal(m, b.DecryptData(b.EncryptData(m)));
        Assert.Equal(m, b.DecryptData(b.EncryptData(m, EcPointFormat.Compressed)));
    }
}
